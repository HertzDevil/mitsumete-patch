.ifndef __MACROS_INC__
.define __MACROS_INC__

C_1 = $0C
Cs1 = $0D
Cb1 = $0B
D_1 = $0E
Ds1 = $0F
Db1 = $0D
E_1 = $10
Es1 = $11
Eb1 = $0F
F_1 = $11
Fs1 = $12
Fb1 = $10
G_1 = $13
Gs1 = $14
Gb1 = $12
A_1 = $15
As1 = $16
Ab1 = $14
B_1 = $17
Bs1 = $18
Bb1 = $16
C_2 = $18
Cs2 = $19
Cb2 = $17
D_2 = $1A
Ds2 = $1B
Db2 = $19
E_2 = $1C
Es2 = $1D
Eb2 = $1B
F_2 = $1D
Fs2 = $1E
Fb2 = $1C
G_2 = $1F
Gs2 = $20
Gb2 = $1E
A_2 = $21
As2 = $22
Ab2 = $20
B_2 = $23
Bs2 = $24
Bb2 = $22
C_3 = $24
Cs3 = $25
Cb3 = $23
D_3 = $26
Ds3 = $27
Db3 = $25
E_3 = $28
Es3 = $29
Eb3 = $27
F_3 = $29
Fs3 = $2A
Fb3 = $28
G_3 = $2B
Gs3 = $2C
Gb3 = $2A
A_3 = $2D
As3 = $2E
Ab3 = $2C
B_3 = $2F
Bs3 = $30
Bb3 = $2E
C_4 = $30
Cs4 = $31
Cb4 = $2F
D_4 = $32
Ds4 = $33
Db4 = $31
E_4 = $34
Es4 = $35
Eb4 = $33
F_4 = $35
Fs4 = $36
Fb4 = $34
G_4 = $37
Gs4 = $38
Gb4 = $36
A_4 = $39
As4 = $3A
Ab4 = $38
B_4 = $3B
Bs4 = $3C
Bb4 = $3A
C_5 = $3C
Cs5 = $3D
Cb5 = $3B
D_5 = $3E
Ds5 = $3F
Db5 = $3D
E_5 = $40
Es5 = $41
Eb5 = $3F
F_5 = $41
Fs5 = $42
Fb5 = $40
G_5 = $43
Gs5 = $44
Gb5 = $42
A_5 = $45
As5 = $46
Ab5 = $44
B_5 = $47
Bs5 = $48
Bb5 = $46
C_6 = $48
Cs6 = $49
Cb6 = $47
D_6 = $4A
Ds6 = $4B
Db6 = $49
E_6 = $4C
Es6 = $4D
Eb6 = $4B
F_6 = $4D
Fs6 = $4E
Fb6 = $4C
G_6 = $4F
Gs6 = $50
Gb6 = $4E
A_6 = $51
As6 = $52
Ab6 = $50
B_6 = $53
Bs6 = $54
Bb6 = $52
C_7 = $54
Cs7 = $55
Cb7 = $53
D_7 = $56
Ds7 = $57
Db7 = $55
E_7 = $58
Es7 = $59
Eb7 = $57
F_7 = $59
Fs7 = $5A
Fb7 = $58
G_7 = $5B
Gs7 = $5C
Gb7 = $5A
A_7 = $5D
As7 = $5E
Ab7 = $5C
B_7 = $5F
Bs7 = $60
Bb7 = $5E

SPC_VOLL0 = $00
SPC_VOLL1 = $10
SPC_VOLL2 = $20
SPC_VOLL3 = $30
SPC_VOLL4 = $40
SPC_VOLL5 = $50
SPC_VOLL6 = $60
SPC_VOLL7 = $70

SPC_VOLR0 = $01
SPC_VOLR1 = $11
SPC_VOLR2 = $21
SPC_VOLR3 = $31
SPC_VOLR4 = $41
SPC_VOLR5 = $51
SPC_VOLR6 = $61
SPC_VOLR7 = $71

SPC_P0 = $02
SPC_P1 = $12
SPC_P2 = $22
SPC_P3 = $32
SPC_P4 = $42
SPC_P5 = $52
SPC_P6 = $62
SPC_P7 = $72

SPC_SRCN0 = $04
SPC_SRCN1 = $14
SPC_SRCN2 = $24
SPC_SRCN3 = $34
SPC_SRCN4 = $44
SPC_SRCN5 = $54
SPC_SRCN6 = $64
SPC_SRCN7 = $74

SPC_ADSR0 = $05
SPC_ADSR1 = $15
SPC_ADSR2 = $25
SPC_ADSR3 = $35
SPC_ADSR4 = $45
SPC_ADSR5 = $55
SPC_ADSR6 = $65
SPC_ADSR7 = $75

SPC_GAIN0 = $07
SPC_GAIN1 = $17
SPC_GAIN2 = $27
SPC_GAIN3 = $37
SPC_GAIN4 = $47
SPC_GAIN5 = $57
SPC_GAIN6 = $67
SPC_GAIN7 = $77

SPC_ENVX0 = $08
SPC_ENVX1 = $18
SPC_ENVX2 = $28
SPC_ENVX3 = $38
SPC_ENVX4 = $48
SPC_ENVX5 = $58
SPC_ENVX6 = $68
SPC_ENVX7 = $78

SPC_OUTX0 = $09
SPC_OUTX1 = $19
SPC_OUTX2 = $29
SPC_OUTX3 = $39
SPC_OUTX4 = $49
SPC_OUTX5 = $59
SPC_OUTX6 = $69
SPC_OUTX7 = $79

SPC_MVOLL = $0C
SPC_MVOLR = $1C
SPC_EVOLL = $2C
SPC_EVOLR = $3C
SPC_KON = $4C
SPC_KOFF = $5C
SPC_FLG = $6C
SPC_ENDX = $7C

SPC_EFB = $0D
SPC_PMON = $2D
SPC_NON = $3D
SPC_EON = $4D
SPC_DIR = $5D
SPC_ESA = $6D
SPC_EDL = $7D

SPC_COEF0 = $0F
SPC_COEF1 = $1F
SPC_COEF2 = $2F
SPC_COEF3 = $3F
SPC_COEF4 = $4F
SPC_COEF5 = $5F
SPC_COEF6 = $6F
SPC_COEF7 = $7F


.macro note pitch, vel, gate, len
	.if .paramcount = 1
		.byte	pitch
	.elseif .paramcount = 4
		.byte	pitch, vel + $80, gate, len
	.else
		.error "incorrect number of arguments"
	.endif
.endmacro

.macro n_vel note, value
	.byte	note, $7D, value
.endmacro

.macro n_gate note, value
	.byte	note, $7E, value
.endmacro

.macro n_len note, ticks
	.byte	note, $7F, ticks
.endmacro

.macro dsp port, val
	.byte	$69, port, val
.endmacro

.macro bend offset
	.byte	$6C, offset & $FF
.endmacro

.macro echo flags, feedback, lvol, rvol
	.byte	$6D, flags, feedback, lvol, rvol
.endmacro

.macro track index, start
	.byte	$6E, index
	.addr	start
.endmacro

.macro perc
	.byte	$6F
.endmacro

.macro detune mult
	.byte	$70, mult, 0
.endmacro

.macro vib depth
	.byte	$71, depth, 0
.endmacro

.macro vibspd rate
	.byte	$6A, rate
.endmacro

.macro vol value
	.byte	$72, value, 0
.endmacro

.macro pan value
	.byte	$73, $40 - value
.endmacro

.macro loop
	.byte	$74
.endmacro

.macro loopend count
	.byte	$75, count
.endmacro

.macro pat start
	.byte	$76
	.addr	start
.endmacro

.macro endpat
	.byte	$77
.endmacro

.macro end
	.byte	$78
.endmacro

.macro tempo value, rate
	.byte	$79, value, rate
.endmacro

.macro trsp offset
	.byte	$7A, offset
.endmacro

.macro inst index
	.byte	$7B, index
.endmacro

.macro rest ticks
	.byte	$7C, ticks
.endmacro

.macro w_vel value
	.byte	$7D, value
.endmacro

.macro w_gate value
	.byte	$7E, value
.endmacro

.macro w_len ticks
	.byte	$7F, ticks
.endmacro

.endif ; __MACROS_INC__
